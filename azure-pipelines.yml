# Node.js Function App to Linux on Azure
# Build a Node.js function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - '*'
    exclude:
      - master
  paths:
    include:
      - functions/*

pr: none

variables:

  # Azure Resource Manager connection created during pipeline creation
  # azureSubscription: $(azureSubscription)

  # # Function app name
  # functionAppName: ''
 
  # # Environment name
  # environmentName: ''
 
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  targetDir: functions

  # keyVaultName: 'azure-devops-integration'
  # keyVaultKeyNameForGitHubAccess: 'github-access'
  sshPrivateKeyFileName: 'id_rsa-devops'

  functionsPackagesDir: 'arm-templates/function-packages'
  functionsPackageName: 'functions.zip'

  gitHubUrl: git@github.com:dzeyelid/animal-crossing-turnip-price-record.git
  gitHubConfigUserName: Azure DevOps Pipeline runner
  gitHubConfigUserEmail: dzeyelid+devops@gmail.com
  repositoryDir: animal-crossing-turnip-price-record

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
      
    steps:

    # - task: AzureKeyVault@1
    #   inputs:
    #     azureSubscription: $(azureSubscription)
    #     keyVaultName: $(keyVaultname)
    #     secretsFilter: $(keyVaultKeyNameForGitHubAccess)

    - task: DownloadSecureFile@1
      name: downloadedSshPrivateKey
      inputs:
        secureFile: $(sshPrivateKeyFileName)

    - task: CopyFiles@2
      inputs:
        SourceFolder: $(Agent.TempDirectory)
        Contents: $(sshPrivateKeyFileName)
        TargetFolder: ~/.ssh

    - script: |
        cat "Host github.com" > ~/.ssh/config
        cat "\thostName github.com" > ~/.ssh/config
        cat "\tIdentityFile ~/.ssh/$(sshPrivateKeyFileName)" > ~/.ssh/config
      displayName: Create ssh config file

    - script: |
        git clone $(gitHubUrl)
        cd $(repositoryDir)
        git config user.name "$(gitHubConfigUserName)"
        git config user.email "$(gitHubConfigUserEmail)"
        git switch -c $(Build.SourceBranchName) --track origin/$(Build.SourceBranchName)
      displayName: Clone the repository to push later
      workingDirectory: $(Agent.TempDirectory)

    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'

    - script: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
        fi
      displayName: 'Build extensions'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(targetDir)

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'Prepare binaries'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(targetDir)

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/$(targetDir)
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Agent.TempDirectory)/$(repositoryDir)/$(functionsPackagesDir)/$(functionsPackageName)
        replaceExistingArchive: true

    # - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #   artifact: drop

    - script: |
        pwd
        git add $(functionsPackagesDir)/$(functionsPackageName)
        git commit -m "Update the function package"
        git push origin $(Build.SourceBranchName)
      displayName: Push zip archive to the branch
      workingDirectory: $(Agent.TempDirectory)/$(repositoryDir)

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: $(environmentName)
#     pool: 
#       vmImage: $(vmImageName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:            
#           - task: AzureFunctionApp@1
#             displayName: 'Azure Functions App Deploy: '
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: functionAppLinux
#               appName: $(functionAppName)
#               package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'